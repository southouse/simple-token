{
  "contractName": "SampleCrowdsale",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "hasClosed",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rate",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "goal",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "weiRaised",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOpen",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "closingTime",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "finalize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "capReached",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "wallet",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "goalReached",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "finalized",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "openingTime",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "refundee",
          "type": "address"
        }
      ],
      "name": "claimRefund",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "buyTokens",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "openingTime",
          "type": "uint256"
        },
        {
          "name": "closingTime",
          "type": "uint256"
        },
        {
          "name": "rate",
          "type": "uint256"
        },
        {
          "name": "wallet",
          "type": "address"
        },
        {
          "name": "cap",
          "type": "uint256"
        },
        {
          "name": "token",
          "type": "address"
        },
        {
          "name": "goal",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CrowdsaleFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "purchaser",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensPurchased",
      "type": "event"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "0x608060405260043610610110576000357c0100000000000000000000000000000000000000000000000000000000900480634f935945116100a7578063b7a8807c11610076578063b7a8807c1461034b578063bffa55d514610376578063ec8ac4d8146103c7578063fc0c546a1461040b57610110565b80634f93594514610267578063521eb273146102965780637d3d6522146102ed578063b3f05b971461031c57610110565b80634042b66f116100e35780634042b66f146101cb57806347535d7b146101f65780634b6753bc146102255780634bb278f31461025057610110565b80631515bc2b1461011b5780632c4e722e1461014a578063355274ea1461017557806340193883146101a0575b61011933610462565b005b34801561012757600080fd5b50610130610558565b604051808215151515815260200191505060405180910390f35b34801561015657600080fd5b5061015f610564565b6040518082815260200191505060405180910390f35b34801561018157600080fd5b5061018a61056e565b6040518082815260200191505060405180910390f35b3480156101ac57600080fd5b506101b5610578565b6040518082815260200191505060405180910390f35b3480156101d757600080fd5b506101e0610582565b6040518082815260200191505060405180910390f35b34801561020257600080fd5b5061020b61058c565b604051808215151515815260200191505060405180910390f35b34801561023157600080fd5b5061023a6105a7565b6040518082815260200191505060405180910390f35b34801561025c57600080fd5b506102656105b1565b005b34801561027357600080fd5b5061027c610631565b604051808215151515815260200191505060405180910390f35b3480156102a257600080fd5b506102ab610645565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102f957600080fd5b5061030261066f565b604051808215151515815260200191505060405180910390f35b34801561032857600080fd5b50610331610683565b604051808215151515815260200191505060405180910390f35b34801561035757600080fd5b5061036061069a565b6040518082815260200191505060405180910390f35b34801561038257600080fd5b506103c56004803603602081101561039957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106a4565b005b610409600480360360208110156103dd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610462565b005b34801561041757600080fd5b506104206107a3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60016000808282540192505081905550600080549050600034905061048783826107cd565b6000610492826107ee565b90506104a98260045461080c90919063ffffffff16565b6004819055506104b9848261082d565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b8484604051808381526020018281526020019250505060405180910390a3610530848361083b565b61053861083f565b6105428483610917565b50506000548114151561055457600080fd5b5050565b60006007544211905090565b6000600354905090565b6000600554905090565b6000600954905090565b6000600454905090565b600060065442101580156105a257506007544211155b905090565b6000600754905090565b600860009054906101000a900460ff161515156105cd57600080fd5b6105d5610558565b15156105e057600080fd5b6001600860006101000a81548160ff02191690831515021790555061060361091b565b7f9270cc390c096600a1c17c44345a1ba689fafd99d97487b10cfccf86cf73183660405160405180910390a1565b600060055461063e610582565b1015905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060095461067c610582565b1015905090565b6000600860009054906101000a900460ff16905090565b6000600654905090565b6106ac610683565b15156106b757600080fd5b6106bf61066f565b1515156106cb57600080fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351cff8d9826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561078857600080fd5b505af115801561079c573d6000803e3d6000fd5b5050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6107d561058c565b15156107e057600080fd5b6107ea8282610b12565b5050565b600061080560035483610b4a90919063ffffffff16565b9050919050565b600080828401905083811015151561082357600080fd5b8091505092915050565b6108378282610b88565b5050565b5050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f340fa0134336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506000604051808303818588803b1580156108fc57600080fd5b505af1158015610910573d6000803e3d6000fd5b5050505050565b5050565b61092361066f565b15610a6957600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343d726d66040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156109ae57600080fd5b505af11580156109c2573d6000803e3d6000fd5b50505050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639af6549a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015610a4c57600080fd5b505af1158015610a60573d6000803e3d6000fd5b50505050610b08565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c52dc416040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015610aef57600080fd5b505af1158015610b03573d6000803e3d6000fd5b505050505b610b10610c7c565b565b610b1c8282610c7e565b600554610b3982610b2b610582565b61080c90919063ffffffff16565b11151515610b4657600080fd5b5050565b600080831415610b5d5760009050610b82565b60008284029050828482811515610b7057fe5b04141515610b7d57600080fd5b809150505b92915050565b610b906107a3565b73ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610c3257600080fd5b505af1158015610c46573d6000803e3d6000fd5b505050506040513d6020811015610c5c57600080fd5b81019080805190602001909291905050501515610c7857600080fd5b5050565b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610cba57600080fd5b60008114151515610cca57600080fd5b505056fea165627a7a723058209d37e22c855a1f70dd9fbd3d0ab147aee582735ecad7620de3a3b7e2015d4ed80029",
  "sourceMap": "1257:649:29:-;;;1345:559;8:9:-1;5:2;;;30:1;27;20:12;5:2;1345:559:29;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1345:559:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1708:4;1654:11;1667;1626:3;1581:4;1587:6;1595:5;576:1:126;560:13;:17;;;;2380:1:7;2373:4;:8;2365:17;;;;;;;;2418:1;2400:20;;:6;:20;;;;2392:29;;;;;;;;2465:1;2439:28;;2447:5;2439:28;;;;2431:37;;;;;;;;2487:4;2479:5;:12;;;;2511:6;2501:7;;:16;;;;;;;;;;;;;;;;;;2536:5;2527:6;;:14;;;;;;;;;;;;;;;;;;2283:265;;;488:1:15;482:3;:7;474:16;;;;;;;;507:3;500:4;:10;;;;431:86;806:15:18;791:11;:30;;783:39;;;;;;;;854:11;840;:25;832:34;;;;;;;;892:11;877:12;:26;;;;928:11;913:12;:26;;;;657:289;;454:5:8;441:10;;:18;;;;;;;;;;;;;;;;;;1213:1:10;1206:4;:8;1198:17;;;;;;;;1252:8;:6;;;:8;;;:::i;:::-;1235:26;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1235:26:10;1225:7;;:36;;;;;;;;;;;;;;;;;;1279:4;1271:5;:12;;;;1154:136;1893:3:29;1885:4;:11;;1877:20;;;;;;;;1345:559;;;;;;;1257:649;;3114:87:7;3153:15;3187:7;;;;;;;;;;;3180:14;;3114:87;:::o;1257:649:29:-;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "1257:649:29:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2875:21:7;2885:10;2875:9;:21::i;:::-;1257:649:29;1692:156:18;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1692:156:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3286:75:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3286:75:7;;;:::i;:::-;;;;;;;;;;;;;;;;;;;580:73:15;;8:9:-1;5:2;;;30:1;27;20:12;5:2;580:73:15;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1372:75:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1372:75:10;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3424:85:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3424:85:7;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1339:189:18;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1339:189:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1165:89;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1165:89:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;796:183:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;796:183:8;;;:::i;:::-;;771:92:15;;8:9:-1;5:2;;;30:1;27;20:12;5:2;771:92:15;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3114:87:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3114:87:7;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1880:94:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1880:94:10;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;556:82:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;556:82:8;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1011:89:18;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1011:89:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1596:161:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1596:161:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1596:161:10;;;;;;;;;;;;;;;;;;;:::i;:::-;;3766:603:7;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3766:603:7;;;;;;;;;;;;;;;;;;;:::i;:::-;;2962:76;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2962:76:7;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3766:603;1010:1:126;993:13;;:18;;;;;;;;;;;1021:20;1044:13;;1021:36;;3844:17:7;3864:9;3844:29;;3883:44;3904:11;3917:9;3883:20;:44::i;:::-;3986:14;4003:26;4019:9;4003:15;:26::i;:::-;3986:43;;4077:25;4092:9;4077:10;;:14;;:25;;;;:::i;:::-;4064:10;:38;;;;4113:37;4130:11;4143:6;4113:16;:37::i;:::-;4193:11;4165:59;;4181:10;4165:59;;;4206:9;4217:6;4165:59;;;;;;;;;;;;;;;;;;;;;;;;4235:46;4258:11;4271:9;4235:22;:46::i;:::-;4292:15;:13;:15::i;:::-;4317:45;4339:11;4352:9;4317:21;:45::i;:::-;1067:1:126;;1102:13;;1086:12;:29;1078:38;;;;;;;;3766:603:7;;:::o;1692:156:18:-;1734:4;1829:12;;1811:15;:30;1804:37;;1692:156;:::o;3286:75:7:-;3323:7;3349:5;;3342:12;;3286:75;:::o;580:73:15:-;616:7;642:4;;635:11;;580:73;:::o;1372:75:10:-;1409:7;1435:5;;1428:12;;1372:75;:::o;3424:85:7:-;3466:7;3492:10;;3485:17;;3424:85;:::o;1339:189:18:-;1378:4;1474:12;;1455:15;:31;;:66;;;;;1509:12;;1490:15;:31;;1455:66;1448:73;;1339:189;:::o;1165:89::-;1209:7;1235:12;;1228:19;;1165:89;:::o;796:183:8:-;842:10;;;;;;;;;;;841:11;833:20;;;;;;;;871:11;:9;:11::i;:::-;863:20;;;;;;;;907:4;894:10;;:17;;;;;;;;;;;;;;;;;;922:15;:13;:15::i;:::-;952:20;;;;;;;;;;796:183::o;771:92:15:-;814:4;852;;837:11;:9;:11::i;:::-;:19;;830:26;;771:92;:::o;3114:87:7:-;3153:15;3187:7;;;;;;;;;;;3180:14;;3114:87;:::o;1880:94:10:-;1924:4;1962:5;;1947:11;:9;:11::i;:::-;:20;;1940:27;;1880:94;:::o;556:82:8:-;598:4;621:10;;;;;;;;;;;614:17;;556:82;:::o;1011:89:18:-;1055:7;1081:12;;1074:19;;1011:89;:::o;1596:161:10:-;1668:11;:9;:11::i;:::-;1660:20;;;;;;;;1699:13;:11;:13::i;:::-;1698:14;1690:23;;;;;;;;1724:7;;;;;;;;;;;:16;;;1741:8;1724:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1724:26:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1724:26:10;;;;1596:161;:::o;2962:76:7:-;3000:6;3025;;;;;;;;;;;3018:13;;2962:76;:::o;2040:165:18:-;442:8;:6;:8::i;:::-;434:17;;;;;;;;2148:50;2175:11;2188:9;2148:26;:50::i;:::-;2040:165;;:::o;7004:120:7:-;7071:7;7097:20;7111:5;;7097:9;:13;;:20;;;;:::i;:::-;7090:27;;7004:120;;;:::o;1439:145:36:-;1497:7;1516:9;1532:1;1528;:5;1516:17;;1556:1;1551;:6;;1543:15;;;;;;;;1576:1;1569:8;;;1439:145;;;;:::o;6206:134:7:-;6293:40;6308:11;6321;6293:14;:40::i;:::-;6206:134;;:::o;6610:145::-;;;:::o;2401:95:10:-;2445:7;;;;;;;;;;;:15;;;2467:9;2478:10;2445:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2445:44:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2445:44:10;;;;;2401:95::o;5374:149:7:-;;;:::o;2067:238:10:-;2115:13;:11;:13::i;:::-;2111:156;;;2144:7;;;;;;;;;;;:13;;;:15;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2144:15:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2144:15:10;;;;2173:7;;;;;;;;;;;:27;;;:29;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2173:29:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2173:29:10;;;;2111:156;;;2233:7;;;;;;;;;;;:21;;;:23;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2233:23:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2233:23:10;;;;2111:156;2277:21;:19;:21::i;:::-;2067:238::o;1059:204:15:-;1153:50;1180:11;1193:9;1153:26;:50::i;:::-;1251:4;;1221:26;1237:9;1221:11;:9;:11::i;:::-;:15;;:26;;;;:::i;:::-;:34;;1213:43;;;;;;;;1059:204;;:::o;231:421:36:-;289:7;534:1;529;:6;525:45;;;558:1;551:8;;;;525:45;580:9;596:1;592;:5;580:17;;624:1;619;615;:5;;;;;;;;:10;607:19;;;;;;;;644:1;637:8;;;231:421;;;;;:::o;510:236:13:-;698:7;:5;:7::i;:::-;676:36;;;713:11;726;676:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;676:62:13;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;676:62:13;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;676:62:13;;;;;;;;;;;;;;;;668:71;;;;;;;;510:236;;:::o;1188:98:8:-;:::o;4911:168:7:-;5036:1;5013:25;;:11;:25;;;;5005:34;;;;;;;;5070:1;5057:9;:14;;5049:23;;;;;;;;4911:168;;:::o",
  "source": "pragma solidity ^0.5.2;\n\nimport \"../crowdsale/validation/CappedCrowdsale.sol\";\nimport \"../crowdsale/distribution/RefundableCrowdsale.sol\";\nimport \"../crowdsale/emission/MintedCrowdsale.sol\";\nimport \"../token/ERC20/ERC20Mintable.sol\";\nimport \"../token/ERC20/ERC20Detailed.sol\";\n\n/**\n * @title SampleCrowdsaleToken\n * @dev Very simple ERC20 Token that can be minted.\n * It is meant to be used in a crowdsale contract.\n */\ncontract SampleCrowdsaleToken is ERC20Mintable, ERC20Detailed {\n    constructor () public ERC20Detailed(\"Sample Crowdsale Token\", \"SCT\", 18) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n}\n\n/**\n * @title SampleCrowdsale\n * @dev This is an example of a fully fledged crowdsale.\n * The way to add new features to a base crowdsale is by multiple inheritance.\n * In this example we are providing following extensions:\n * CappedCrowdsale - sets a max boundary for raised funds\n * RefundableCrowdsale - set a min goal to be reached and returns funds if it's not met\n * MintedCrowdsale - assumes the token can be minted by the crowdsale, which does so\n * when receiving purchases.\n *\n * After adding multiple features it's good practice to run integration tests\n * to ensure that subcontracts works together as intended.\n */\ncontract SampleCrowdsale is CappedCrowdsale, RefundableCrowdsale, MintedCrowdsale {\n    constructor (\n        uint256 openingTime,\n        uint256 closingTime,\n        uint256 rate,\n        address payable wallet,\n        uint256 cap,\n        ERC20Mintable token,\n        uint256 goal\n    )\n        public\n        Crowdsale(rate, wallet, token)\n        CappedCrowdsale(cap)\n        TimedCrowdsale(openingTime, closingTime)\n        RefundableCrowdsale(goal)\n    {\n        //As goal needs to be met for a successful crowdsale\n        //the value needs to less or equal than a cap which is limit for accepted funds\n        require(goal <= cap);\n    }\n}\n",
  "sourcePath": "/home/nventuro/dev/openzeppelin-solidity/contracts/examples/SampleCrowdsale.sol",
  "ast": {
    "absolutePath": "/home/nventuro/dev/openzeppelin-solidity/contracts/examples/SampleCrowdsale.sol",
    "exportedSymbols": {
      "SampleCrowdsale": [
        3420
      ],
      "SampleCrowdsaleToken": [
        3374
      ]
    },
    "id": 3421,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3355,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:29"
      },
      {
        "absolutePath": "/home/nventuro/dev/openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol",
        "file": "../crowdsale/validation/CappedCrowdsale.sol",
        "id": 3356,
        "nodeType": "ImportDirective",
        "scope": 3421,
        "sourceUnit": 1596,
        "src": "25:53:29",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/nventuro/dev/openzeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol",
        "file": "../crowdsale/distribution/RefundableCrowdsale.sol",
        "id": 3357,
        "nodeType": "ImportDirective",
        "scope": 3421,
        "sourceUnit": 1248,
        "src": "79:59:29",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/nventuro/dev/openzeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol",
        "file": "../crowdsale/emission/MintedCrowdsale.sol",
        "id": 3358,
        "nodeType": "ImportDirective",
        "scope": 3421,
        "sourceUnit": 1390,
        "src": "139:51:29",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/nventuro/dev/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol",
        "file": "../token/ERC20/ERC20Mintable.sol",
        "id": 3359,
        "nodeType": "ImportDirective",
        "scope": 3421,
        "sourceUnit": 7912,
        "src": "191:42:29",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/nventuro/dev/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol",
        "file": "../token/ERC20/ERC20Detailed.sol",
        "id": 3360,
        "nodeType": "ImportDirective",
        "scope": 3421,
        "sourceUnit": 7884,
        "src": "234:42:29",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3361,
              "name": "ERC20Mintable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 7911,
              "src": "453:13:29",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Mintable_$7911",
                "typeString": "contract ERC20Mintable"
              }
            },
            "id": 3362,
            "nodeType": "InheritanceSpecifier",
            "src": "453:13:29"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3363,
              "name": "ERC20Detailed",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 7883,
              "src": "468:13:29",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Detailed_$7883",
                "typeString": "contract ERC20Detailed"
              }
            },
            "id": 3364,
            "nodeType": "InheritanceSpecifier",
            "src": "468:13:29"
          }
        ],
        "contractDependencies": [
          299,
          7737,
          7883,
          7911,
          8082
        ],
        "contractKind": "contract",
        "documentation": "@title SampleCrowdsaleToken\n@dev Very simple ERC20 Token that can be minted.\nIt is meant to be used in a crowdsale contract.",
        "fullyImplemented": true,
        "id": 3374,
        "linearizedBaseContracts": [
          3374,
          7883,
          7911,
          299,
          7737,
          8082
        ],
        "name": "SampleCrowdsaleToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 3372,
              "nodeType": "Block",
              "src": "561:64:29",
              "statements": []
            },
            "documentation": null,
            "id": 3373,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "53616d706c652043726f776473616c6520546f6b656e",
                    "id": 3367,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "524:24:29",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_57a85b1937a20a5d495de875a4a7af46ff581ccf3f336ab6c1a136ea0b8088ca",
                      "typeString": "literal_string \"Sample Crowdsale Token\""
                    },
                    "value": "Sample Crowdsale Token"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "534354",
                    "id": 3368,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "550:5:29",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_b2b1dc3929a2664c613672dce30cd0d6fe6b6e782ad9ee21092964c70aaaffa9",
                      "typeString": "literal_string \"SCT\""
                    },
                    "value": "SCT"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "3138",
                    "id": 3369,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "557:2:29",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_18_by_1",
                      "typeString": "int_const 18"
                    },
                    "value": "18"
                  }
                ],
                "id": 3370,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3366,
                  "name": "ERC20Detailed",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 7883,
                  "src": "510:13:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Detailed_$7883_$",
                    "typeString": "type(contract ERC20Detailed)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "510:50:29"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3365,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "500:2:29"
            },
            "returnParameters": {
              "id": 3371,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "561:0:29"
            },
            "scope": 3374,
            "src": "488:137:29",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 3421,
        "src": "420:207:29"
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3375,
              "name": "CappedCrowdsale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1595,
              "src": "1285:15:29",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CappedCrowdsale_$1595",
                "typeString": "contract CappedCrowdsale"
              }
            },
            "id": 3376,
            "nodeType": "InheritanceSpecifier",
            "src": "1285:15:29"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3377,
              "name": "RefundableCrowdsale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1247,
              "src": "1302:19:29",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_RefundableCrowdsale_$1247",
                "typeString": "contract RefundableCrowdsale"
              }
            },
            "id": 3378,
            "nodeType": "InheritanceSpecifier",
            "src": "1302:19:29"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3379,
              "name": "MintedCrowdsale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1389,
              "src": "1323:15:29",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MintedCrowdsale_$1389",
                "typeString": "contract MintedCrowdsale"
              }
            },
            "id": 3380,
            "nodeType": "InheritanceSpecifier",
            "src": "1323:15:29"
          }
        ],
        "contractDependencies": [
          984,
          1042,
          1247,
          1389,
          1595,
          1847,
          9847
        ],
        "contractKind": "contract",
        "documentation": "@title SampleCrowdsale\n@dev This is an example of a fully fledged crowdsale.\nThe way to add new features to a base crowdsale is by multiple inheritance.\nIn this example we are providing following extensions:\nCappedCrowdsale - sets a max boundary for raised funds\nRefundableCrowdsale - set a min goal to be reached and returns funds if it's not met\nMintedCrowdsale - assumes the token can be minted by the crowdsale, which does so\nwhen receiving purchases.\n * After adding multiple features it's good practice to run integration tests\nto ensure that subcontracts works together as intended.",
        "fullyImplemented": true,
        "id": 3420,
        "linearizedBaseContracts": [
          3420,
          1389,
          1247,
          1042,
          1847,
          1595,
          984,
          9847
        ],
        "name": "SampleCrowdsale",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 3418,
              "nodeType": "Block",
              "src": "1718:186:29",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 3415,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 3413,
                          "name": "goal",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3394,
                          "src": "1885:4:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 3414,
                          "name": "cap",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3390,
                          "src": "1893:3:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1885:11:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 3412,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        9865,
                        9866
                      ],
                      "referencedDeclaration": 9865,
                      "src": "1877:7:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 3416,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1877:20:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3417,
                  "nodeType": "ExpressionStatement",
                  "src": "1877:20:29"
                }
              ]
            },
            "documentation": null,
            "id": 3419,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 3397,
                    "name": "rate",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3386,
                    "src": "1581:4:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 3398,
                    "name": "wallet",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3388,
                    "src": "1587:6:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 3399,
                    "name": "token",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3392,
                    "src": "1595:5:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20Mintable_$7911",
                      "typeString": "contract ERC20Mintable"
                    }
                  }
                ],
                "id": 3400,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3396,
                  "name": "Crowdsale",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 984,
                  "src": "1571:9:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_Crowdsale_$984_$",
                    "typeString": "type(contract Crowdsale)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1571:30:29"
              },
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 3402,
                    "name": "cap",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3390,
                    "src": "1626:3:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 3403,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3401,
                  "name": "CappedCrowdsale",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1595,
                  "src": "1610:15:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_CappedCrowdsale_$1595_$",
                    "typeString": "type(contract CappedCrowdsale)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1610:20:29"
              },
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 3405,
                    "name": "openingTime",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3382,
                    "src": "1654:11:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 3406,
                    "name": "closingTime",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3384,
                    "src": "1667:11:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 3407,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3404,
                  "name": "TimedCrowdsale",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1847,
                  "src": "1639:14:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_TimedCrowdsale_$1847_$",
                    "typeString": "type(contract TimedCrowdsale)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1639:40:29"
              },
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 3409,
                    "name": "goal",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3394,
                    "src": "1708:4:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 3410,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3408,
                  "name": "RefundableCrowdsale",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1247,
                  "src": "1688:19:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_RefundableCrowdsale_$1247_$",
                    "typeString": "type(contract RefundableCrowdsale)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1688:25:29"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3395,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3382,
                  "name": "openingTime",
                  "nodeType": "VariableDeclaration",
                  "scope": 3419,
                  "src": "1367:19:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3381,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1367:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3384,
                  "name": "closingTime",
                  "nodeType": "VariableDeclaration",
                  "scope": 3419,
                  "src": "1396:19:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3383,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1396:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3386,
                  "name": "rate",
                  "nodeType": "VariableDeclaration",
                  "scope": 3419,
                  "src": "1425:12:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3385,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1425:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3388,
                  "name": "wallet",
                  "nodeType": "VariableDeclaration",
                  "scope": 3419,
                  "src": "1447:22:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 3387,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1447:15:29",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3390,
                  "name": "cap",
                  "nodeType": "VariableDeclaration",
                  "scope": 3419,
                  "src": "1479:11:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3389,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1479:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3392,
                  "name": "token",
                  "nodeType": "VariableDeclaration",
                  "scope": 3419,
                  "src": "1500:19:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20Mintable_$7911",
                    "typeString": "contract ERC20Mintable"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 3391,
                    "name": "ERC20Mintable",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 7911,
                    "src": "1500:13:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20Mintable_$7911",
                      "typeString": "contract ERC20Mintable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3394,
                  "name": "goal",
                  "nodeType": "VariableDeclaration",
                  "scope": 3419,
                  "src": "1529:12:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3393,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1529:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1357:190:29"
            },
            "returnParameters": {
              "id": 3411,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1718:0:29"
            },
            "scope": 3420,
            "src": "1345:559:29",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 3421,
        "src": "1257:649:29"
      }
    ],
    "src": "0:1907:29"
  },
  "legacyAST": {
    "absolutePath": "/home/nventuro/dev/openzeppelin-solidity/contracts/examples/SampleCrowdsale.sol",
    "exportedSymbols": {
      "SampleCrowdsale": [
        3420
      ],
      "SampleCrowdsaleToken": [
        3374
      ]
    },
    "id": 3421,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3355,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:29"
      },
      {
        "absolutePath": "/home/nventuro/dev/openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol",
        "file": "../crowdsale/validation/CappedCrowdsale.sol",
        "id": 3356,
        "nodeType": "ImportDirective",
        "scope": 3421,
        "sourceUnit": 1596,
        "src": "25:53:29",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/nventuro/dev/openzeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol",
        "file": "../crowdsale/distribution/RefundableCrowdsale.sol",
        "id": 3357,
        "nodeType": "ImportDirective",
        "scope": 3421,
        "sourceUnit": 1248,
        "src": "79:59:29",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/nventuro/dev/openzeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol",
        "file": "../crowdsale/emission/MintedCrowdsale.sol",
        "id": 3358,
        "nodeType": "ImportDirective",
        "scope": 3421,
        "sourceUnit": 1390,
        "src": "139:51:29",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/nventuro/dev/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol",
        "file": "../token/ERC20/ERC20Mintable.sol",
        "id": 3359,
        "nodeType": "ImportDirective",
        "scope": 3421,
        "sourceUnit": 7912,
        "src": "191:42:29",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/nventuro/dev/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol",
        "file": "../token/ERC20/ERC20Detailed.sol",
        "id": 3360,
        "nodeType": "ImportDirective",
        "scope": 3421,
        "sourceUnit": 7884,
        "src": "234:42:29",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3361,
              "name": "ERC20Mintable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 7911,
              "src": "453:13:29",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Mintable_$7911",
                "typeString": "contract ERC20Mintable"
              }
            },
            "id": 3362,
            "nodeType": "InheritanceSpecifier",
            "src": "453:13:29"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3363,
              "name": "ERC20Detailed",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 7883,
              "src": "468:13:29",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Detailed_$7883",
                "typeString": "contract ERC20Detailed"
              }
            },
            "id": 3364,
            "nodeType": "InheritanceSpecifier",
            "src": "468:13:29"
          }
        ],
        "contractDependencies": [
          299,
          7737,
          7883,
          7911,
          8082
        ],
        "contractKind": "contract",
        "documentation": "@title SampleCrowdsaleToken\n@dev Very simple ERC20 Token that can be minted.\nIt is meant to be used in a crowdsale contract.",
        "fullyImplemented": true,
        "id": 3374,
        "linearizedBaseContracts": [
          3374,
          7883,
          7911,
          299,
          7737,
          8082
        ],
        "name": "SampleCrowdsaleToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 3372,
              "nodeType": "Block",
              "src": "561:64:29",
              "statements": []
            },
            "documentation": null,
            "id": 3373,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "53616d706c652043726f776473616c6520546f6b656e",
                    "id": 3367,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "524:24:29",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_57a85b1937a20a5d495de875a4a7af46ff581ccf3f336ab6c1a136ea0b8088ca",
                      "typeString": "literal_string \"Sample Crowdsale Token\""
                    },
                    "value": "Sample Crowdsale Token"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "534354",
                    "id": 3368,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "550:5:29",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_b2b1dc3929a2664c613672dce30cd0d6fe6b6e782ad9ee21092964c70aaaffa9",
                      "typeString": "literal_string \"SCT\""
                    },
                    "value": "SCT"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "3138",
                    "id": 3369,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "557:2:29",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_18_by_1",
                      "typeString": "int_const 18"
                    },
                    "value": "18"
                  }
                ],
                "id": 3370,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3366,
                  "name": "ERC20Detailed",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 7883,
                  "src": "510:13:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Detailed_$7883_$",
                    "typeString": "type(contract ERC20Detailed)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "510:50:29"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3365,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "500:2:29"
            },
            "returnParameters": {
              "id": 3371,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "561:0:29"
            },
            "scope": 3374,
            "src": "488:137:29",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 3421,
        "src": "420:207:29"
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3375,
              "name": "CappedCrowdsale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1595,
              "src": "1285:15:29",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CappedCrowdsale_$1595",
                "typeString": "contract CappedCrowdsale"
              }
            },
            "id": 3376,
            "nodeType": "InheritanceSpecifier",
            "src": "1285:15:29"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3377,
              "name": "RefundableCrowdsale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1247,
              "src": "1302:19:29",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_RefundableCrowdsale_$1247",
                "typeString": "contract RefundableCrowdsale"
              }
            },
            "id": 3378,
            "nodeType": "InheritanceSpecifier",
            "src": "1302:19:29"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3379,
              "name": "MintedCrowdsale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1389,
              "src": "1323:15:29",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MintedCrowdsale_$1389",
                "typeString": "contract MintedCrowdsale"
              }
            },
            "id": 3380,
            "nodeType": "InheritanceSpecifier",
            "src": "1323:15:29"
          }
        ],
        "contractDependencies": [
          984,
          1042,
          1247,
          1389,
          1595,
          1847,
          9847
        ],
        "contractKind": "contract",
        "documentation": "@title SampleCrowdsale\n@dev This is an example of a fully fledged crowdsale.\nThe way to add new features to a base crowdsale is by multiple inheritance.\nIn this example we are providing following extensions:\nCappedCrowdsale - sets a max boundary for raised funds\nRefundableCrowdsale - set a min goal to be reached and returns funds if it's not met\nMintedCrowdsale - assumes the token can be minted by the crowdsale, which does so\nwhen receiving purchases.\n * After adding multiple features it's good practice to run integration tests\nto ensure that subcontracts works together as intended.",
        "fullyImplemented": true,
        "id": 3420,
        "linearizedBaseContracts": [
          3420,
          1389,
          1247,
          1042,
          1847,
          1595,
          984,
          9847
        ],
        "name": "SampleCrowdsale",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 3418,
              "nodeType": "Block",
              "src": "1718:186:29",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 3415,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 3413,
                          "name": "goal",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3394,
                          "src": "1885:4:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 3414,
                          "name": "cap",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3390,
                          "src": "1893:3:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1885:11:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 3412,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        9865,
                        9866
                      ],
                      "referencedDeclaration": 9865,
                      "src": "1877:7:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 3416,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1877:20:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3417,
                  "nodeType": "ExpressionStatement",
                  "src": "1877:20:29"
                }
              ]
            },
            "documentation": null,
            "id": 3419,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 3397,
                    "name": "rate",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3386,
                    "src": "1581:4:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 3398,
                    "name": "wallet",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3388,
                    "src": "1587:6:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 3399,
                    "name": "token",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3392,
                    "src": "1595:5:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20Mintable_$7911",
                      "typeString": "contract ERC20Mintable"
                    }
                  }
                ],
                "id": 3400,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3396,
                  "name": "Crowdsale",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 984,
                  "src": "1571:9:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_Crowdsale_$984_$",
                    "typeString": "type(contract Crowdsale)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1571:30:29"
              },
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 3402,
                    "name": "cap",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3390,
                    "src": "1626:3:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 3403,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3401,
                  "name": "CappedCrowdsale",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1595,
                  "src": "1610:15:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_CappedCrowdsale_$1595_$",
                    "typeString": "type(contract CappedCrowdsale)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1610:20:29"
              },
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 3405,
                    "name": "openingTime",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3382,
                    "src": "1654:11:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 3406,
                    "name": "closingTime",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3384,
                    "src": "1667:11:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 3407,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3404,
                  "name": "TimedCrowdsale",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1847,
                  "src": "1639:14:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_TimedCrowdsale_$1847_$",
                    "typeString": "type(contract TimedCrowdsale)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1639:40:29"
              },
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 3409,
                    "name": "goal",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3394,
                    "src": "1708:4:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 3410,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3408,
                  "name": "RefundableCrowdsale",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1247,
                  "src": "1688:19:29",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_RefundableCrowdsale_$1247_$",
                    "typeString": "type(contract RefundableCrowdsale)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1688:25:29"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3395,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3382,
                  "name": "openingTime",
                  "nodeType": "VariableDeclaration",
                  "scope": 3419,
                  "src": "1367:19:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3381,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1367:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3384,
                  "name": "closingTime",
                  "nodeType": "VariableDeclaration",
                  "scope": 3419,
                  "src": "1396:19:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3383,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1396:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3386,
                  "name": "rate",
                  "nodeType": "VariableDeclaration",
                  "scope": 3419,
                  "src": "1425:12:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3385,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1425:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3388,
                  "name": "wallet",
                  "nodeType": "VariableDeclaration",
                  "scope": 3419,
                  "src": "1447:22:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 3387,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1447:15:29",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3390,
                  "name": "cap",
                  "nodeType": "VariableDeclaration",
                  "scope": 3419,
                  "src": "1479:11:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3389,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1479:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3392,
                  "name": "token",
                  "nodeType": "VariableDeclaration",
                  "scope": 3419,
                  "src": "1500:19:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20Mintable_$7911",
                    "typeString": "contract ERC20Mintable"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 3391,
                    "name": "ERC20Mintable",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 7911,
                    "src": "1500:13:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20Mintable_$7911",
                      "typeString": "contract ERC20Mintable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3394,
                  "name": "goal",
                  "nodeType": "VariableDeclaration",
                  "scope": 3419,
                  "src": "1529:12:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3393,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1529:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1357:190:29"
            },
            "returnParameters": {
              "id": 3411,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1718:0:29"
            },
            "scope": 3420,
            "src": "1345:559:29",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 3421,
        "src": "1257:649:29"
      }
    ],
    "src": "0:1907:29"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.2+commit.1df8f40c.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.0",
  "updatedAt": "2019-02-25T17:39:18.806Z",
  "devdoc": {
    "details": "This is an example of a fully fledged crowdsale. The way to add new features to a base crowdsale is by multiple inheritance. In this example we are providing following extensions: CappedCrowdsale - sets a max boundary for raised funds RefundableCrowdsale - set a min goal to be reached and returns funds if it's not met MintedCrowdsale - assumes the token can be minted by the crowdsale, which does so when receiving purchases. * After adding multiple features it's good practice to run integration tests to ensure that subcontracts works together as intended.",
    "methods": {
      "buyTokens(address)": {
        "details": "low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn't be called by another `nonReentrant` function.",
        "params": {
          "beneficiary": "Recipient of the token purchase"
        }
      },
      "cap()": {
        "return": "the cap of the crowdsale."
      },
      "capReached()": {
        "details": "Checks whether the cap has been reached.",
        "return": "Whether the cap was reached"
      },
      "claimRefund(address)": {
        "details": "Investors can claim refunds here if crowdsale is unsuccessful",
        "params": {
          "refundee": "Whose refund will be claimed."
        }
      },
      "closingTime()": {
        "return": "the crowdsale closing time."
      },
      "finalize()": {
        "details": "Must be called after crowdsale ends, to do some extra finalization work. Calls the contract's finalization function."
      },
      "finalized()": {
        "return": "true if the crowdsale is finalized, false otherwise."
      },
      "goal()": {
        "return": "minimum amount of funds to be raised in wei."
      },
      "goalReached()": {
        "details": "Checks whether funding goal was reached.",
        "return": "Whether funding goal was reached"
      },
      "hasClosed()": {
        "details": "Checks whether the period in which the crowdsale is open has already elapsed.",
        "return": "Whether crowdsale period has elapsed"
      },
      "isOpen()": {
        "return": "true if the crowdsale is open, false otherwise."
      },
      "openingTime()": {
        "return": "the crowdsale opening time."
      },
      "rate()": {
        "return": "the number of token units a buyer gets per wei."
      },
      "token()": {
        "return": "the token being sold."
      },
      "wallet()": {
        "return": "the address where funds are collected."
      },
      "weiRaised()": {
        "return": "the amount of wei raised."
      }
    },
    "title": "SampleCrowdsale"
  },
  "userdoc": {
    "methods": {}
  }
}