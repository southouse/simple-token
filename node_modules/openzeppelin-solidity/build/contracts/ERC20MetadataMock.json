{
  "contractName": "ERC20MetadataMock",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "tokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000ea238038062000ea2833981018060405260208110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b828101905060208101848111156200006757600080fd5b81518560018202830111640100000000821117156200008557600080fd5b505092919050505080620000a881620000b0640100000000026401000000009004565b50506200017b565b8060039080519060200190620000c8929190620000cc565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200010f57805160ff191683800117855562000140565b8280016001018555821562000140579182015b828111156200013f57825182559160200191906001019062000122565b5b5090506200014f919062000153565b5090565b6200017891905b80821115620001745760008160009055506001016200015a565b5090565b90565b610d17806200018b6000396000f3fe608060405234801561001057600080fd5b50600436106100bb576000357c01000000000000000000000000000000000000000000000000000000009004806370a082311161008357806370a08231146102b3578063a457c2d71461030b578063a9059cbb14610371578063dd62ed3e146103d7578063e0df5b6f1461044f576100bb565b8063095ea7b3146100c057806318160ddd1461012657806323b872dd1461014457806339509351146101ca5780633c130d9014610230575b600080fd5b61010c600480360360408110156100d657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061050a565b604051808215151515815260200191505060405180910390f35b61012e610521565b6040518082815260200191505060405180910390f35b6101b06004803603606081101561015a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061052b565b604051808215151515815260200191505060405180910390f35b610216600480360360408110156101e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105dc565b604051808215151515815260200191505060405180910390f35b610238610681565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561027857808201518184015260208101905061025d565b50505050905090810190601f1680156102a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102f5600480360360208110156102c957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610723565b6040518082815260200191505060405180910390f35b6103576004803603604081101561032157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061076b565b604051808215151515815260200191505060405180910390f35b6103bd6004803603604081101561038757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610810565b604051808215151515815260200191505060405180910390f35b610439600480360360408110156103ed57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610827565b6040518082815260200191505060405180910390f35b6105086004803603602081101561046557600080fd5b810190808035906020019064010000000081111561048257600080fd5b82018360208201111561049457600080fd5b803590602001918460018302840111640100000000831117156104b657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506108ae565b005b60006105173384846108ba565b6001905092915050565b6000600254905090565b6000610538848484610a1d565b6105d184336105cc85600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610be990919063ffffffff16565b6108ba565b600190509392505050565b6000610677338461067285600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c0b90919063ffffffff16565b6108ba565b6001905092915050565b606060038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107195780601f106106ee57610100808354040283529160200191610719565b820191906000526020600020905b8154815290600101906020018083116106fc57829003601f168201915b5050505050905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610806338461080185600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610be990919063ffffffff16565b6108ba565b6001905092915050565b600061081d338484610a1d565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6108b781610c2c565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156108f657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561093257600080fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610a5957600080fd5b610aaa816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610be990919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b3d816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c0b90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000828211151515610bfa57600080fd5b600082840390508091505092915050565b6000808284019050838110151515610c2257600080fd5b8091505092915050565b8060039080519060200190610c42929190610c46565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610c8757805160ff1916838001178555610cb5565b82800160010185558215610cb5579182015b82811115610cb4578251825591602001919060010190610c99565b5b509050610cc29190610cc6565b5090565b610ce891905b80821115610ce4576000816000905550600101610ccc565b5090565b9056fea165627a7a723058203ec0ded7f8b55b103011e10e6e070e4152390ddc06b4ffa0f24e1d941b0a0ee90029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100bb576000357c01000000000000000000000000000000000000000000000000000000009004806370a082311161008357806370a08231146102b3578063a457c2d71461030b578063a9059cbb14610371578063dd62ed3e146103d7578063e0df5b6f1461044f576100bb565b8063095ea7b3146100c057806318160ddd1461012657806323b872dd1461014457806339509351146101ca5780633c130d9014610230575b600080fd5b61010c600480360360408110156100d657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061050a565b604051808215151515815260200191505060405180910390f35b61012e610521565b6040518082815260200191505060405180910390f35b6101b06004803603606081101561015a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061052b565b604051808215151515815260200191505060405180910390f35b610216600480360360408110156101e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105dc565b604051808215151515815260200191505060405180910390f35b610238610681565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561027857808201518184015260208101905061025d565b50505050905090810190601f1680156102a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102f5600480360360208110156102c957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610723565b6040518082815260200191505060405180910390f35b6103576004803603604081101561032157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061076b565b604051808215151515815260200191505060405180910390f35b6103bd6004803603604081101561038757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610810565b604051808215151515815260200191505060405180910390f35b610439600480360360408110156103ed57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610827565b6040518082815260200191505060405180910390f35b6105086004803603602081101561046557600080fd5b810190808035906020019064010000000081111561048257600080fd5b82018360208201111561049457600080fd5b803590602001918460018302840111640100000000831117156104b657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506108ae565b005b60006105173384846108ba565b6001905092915050565b6000600254905090565b6000610538848484610a1d565b6105d184336105cc85600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610be990919063ffffffff16565b6108ba565b600190509392505050565b6000610677338461067285600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c0b90919063ffffffff16565b6108ba565b6001905092915050565b606060038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107195780601f106106ee57610100808354040283529160200191610719565b820191906000526020600020905b8154815290600101906020018083116106fc57829003601f168201915b5050505050905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610806338461080185600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610be990919063ffffffff16565b6108ba565b6001905092915050565b600061081d338484610a1d565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6108b781610c2c565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156108f657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561093257600080fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610a5957600080fd5b610aaa816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610be990919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b3d816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c0b90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000828211151515610bfa57600080fd5b600082840390508091505092915050565b6000808284019050838110151515610c2257600080fd5b8091505092915050565b8060039080519060200190610c42929190610c46565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610c8757805160ff1916838001178555610cb5565b82800160010185558215610cb5579182015b82811115610cb4578251825591602001919060010190610c99565b5b509050610cc29190610cc6565b5090565b610ce891905b80821115610ce4576000816000905550600101610ccc565b5090565b9056fea165627a7a723058203ec0ded7f8b55b103011e10e6e070e4152390ddc06b4ffa0f24e1d941b0a0ee90029",
  "sourceMap": "107:288:53:-;;;164:132;8:9:-1;5:2;;;30:1;27;20:12;5:2;164:132:53;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;164:132:53;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;330:9;325:1;311:12;307:20;289:16;285:43;282:58;261:11;247:12;244:29;233:115;230:2;;;361:1;358;351:12;230:2;0:372;;164:132:53;;;;;;222:8;371:23:23;384:9;371:12;;;:23;;;:::i;:::-;316:85;164:132:53;107:288;;504:94:23;582:9;570;:21;;;;;;;;;;;;:::i;:::-;;504:94;:::o;107:288:53:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "107:288:53:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;107:288:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2745:145:101;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2745:145:101;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;938:89;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3353:224;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3353:224:101;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4080:200;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4080:200:101;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;407:91:23;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;407:91:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1240:104:101;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1240:104:101;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4788:210;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4788:210:101;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1972:137;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1972:137:101;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1675:129;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1675:129:101;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;302:91:53;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;302:91:53;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;302:91:53;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;302:91:53;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;302:91:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;302:91:53;;;;;;;;;;;;;;;:::i;:::-;;2745:145:101;2810:4;2826:36;2835:10;2847:7;2856:5;2826:8;:36::i;:::-;2879:4;2872:11;;2745:145;;;;:::o;938:89::-;982:7;1008:12;;1001:19;;938:89;:::o;3353:224::-;3432:4;3448:26;3458:4;3464:2;3468:5;3448:9;:26::i;:::-;3484:65;3493:4;3499:10;3511:37;3542:5;3511:8;:14;3520:4;3511:14;;;;;;;;;;;;;;;:26;3526:10;3511:26;;;;;;;;;;;;;;;;:30;;:37;;;;:::i;:::-;3484:8;:65::i;:::-;3566:4;3559:11;;3353:224;;;;;:::o;4080:200::-;4160:4;4176:76;4185:10;4197:7;4206:45;4240:10;4206:8;:20;4215:10;4206:20;;;;;;;;;;;;;;;:29;4227:7;4206:29;;;;;;;;;;;;;;;;:33;;:45;;;;:::i;:::-;4176:8;:76::i;:::-;4269:4;4262:11;;4080:200;;;;:::o;407:91:23:-;450:13;482:9;475:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;407:91;:::o;1240:104:101:-;1295:7;1321:9;:16;1331:5;1321:16;;;;;;;;;;;;;;;;1314:23;;1240:104;;;:::o;4788:210::-;4873:4;4889:81;4898:10;4910:7;4919:50;4953:15;4919:8;:20;4928:10;4919:20;;;;;;;;;;;;;;;:29;4940:7;4919:29;;;;;;;;;;;;;;;;:33;;:50;;;;:::i;:::-;4889:8;:81::i;:::-;4987:4;4980:11;;4788:210;;;;:::o;1972:137::-;2033:4;2049:32;2059:10;2071:2;2075:5;2049:9;:32::i;:::-;2098:4;2091:11;;1972:137;;;;:::o;1675:129::-;1747:7;1773:8;:15;1782:5;1773:15;;;;;;;;;;;;;;;:24;1789:7;1773:24;;;;;;;;;;;;;;;;1766:31;;1675:129;;;;:::o;302:91:53:-;364:22;377:8;364:12;:22::i;:::-;302:91;:::o;6833:248:101:-;6944:1;6925:21;;:7;:21;;;;6917:30;;;;;;;;6982:1;6965:19;;:5;:19;;;;6957:28;;;;;;;;7023:5;6996:8;:15;7005:5;6996:15;;;;;;;;;;;;;;;:24;7012:7;6996:24;;;;;;;;;;;;;;;:32;;;;7059:7;7043:31;;7052:5;7043:31;;;7068:5;7043:31;;;;;;;;;;;;;;;;;;6833:248;;;:::o;5217:256::-;5318:1;5304:16;;:2;:16;;;;5296:25;;;;;;;;5350:26;5370:5;5350:9;:15;5360:4;5350:15;;;;;;;;;;;;;;;;:19;;:26;;;;:::i;:::-;5332:9;:15;5342:4;5332:15;;;;;;;;;;;;;;;:44;;;;5402:24;5420:5;5402:9;:13;5412:2;5402:13;;;;;;;;;;;;;;;;:17;;:24;;;;:::i;:::-;5386:9;:13;5396:2;5386:13;;;;;;;;;;;;;;;:40;;;;5456:2;5441:25;;5450:4;5441:25;;;5460:5;5441:25;;;;;;;;;;;;;;;;;;5217:256;;;:::o;1211:145:36:-;1269:7;1301:1;1296;:6;;1288:15;;;;;;;;1313:9;1329:1;1325;:5;1313:17;;1348:1;1341:8;;;1211:145;;;;:::o;1439:::-;1497:7;1516:9;1532:1;1528;:5;1516:17;;1556:1;1551;:6;;1543:15;;;;;;;;1576:1;1569:8;;;1439:145;;;;:::o;504:94:23:-;582:9;570;:21;;;;;;;;;;;;:::i;:::-;;504:94;:::o;107:288:53:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.2;\n\nimport \"../token/ERC20/ERC20.sol\";\nimport \"../drafts/ERC1046/ERC20Metadata.sol\";\n\ncontract ERC20MetadataMock is ERC20, ERC20Metadata {\n    constructor (string memory tokenURI) public ERC20Metadata(tokenURI) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function setTokenURI(string memory tokenURI) public {\n        _setTokenURI(tokenURI);\n    }\n}\n",
  "sourcePath": "/home/nventuro/dev/openzeppelin-solidity/contracts/mocks/ERC20MetadataMock.sol",
  "ast": {
    "absolutePath": "/home/nventuro/dev/openzeppelin-solidity/contracts/mocks/ERC20MetadataMock.sol",
    "exportedSymbols": {
      "ERC20MetadataMock": [
        4473
      ]
    },
    "id": 4474,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4447,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:53"
      },
      {
        "absolutePath": "/home/nventuro/dev/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "file": "../token/ERC20/ERC20.sol",
        "id": 4448,
        "nodeType": "ImportDirective",
        "scope": 4474,
        "sourceUnit": 7738,
        "src": "25:34:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/nventuro/dev/openzeppelin-solidity/contracts/drafts/ERC1046/ERC20Metadata.sol",
        "file": "../drafts/ERC1046/ERC20Metadata.sol",
        "id": 4449,
        "nodeType": "ImportDirective",
        "scope": 4474,
        "sourceUnit": 2111,
        "src": "60:45:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4450,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 7737,
              "src": "137:5:53",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$7737",
                "typeString": "contract ERC20"
              }
            },
            "id": 4451,
            "nodeType": "InheritanceSpecifier",
            "src": "137:5:53"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4452,
              "name": "ERC20Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2110,
              "src": "144:13:53",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Metadata_$2110",
                "typeString": "contract ERC20Metadata"
              }
            },
            "id": 4453,
            "nodeType": "InheritanceSpecifier",
            "src": "144:13:53"
          }
        ],
        "contractDependencies": [
          2110,
          7737,
          8082
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 4473,
        "linearizedBaseContracts": [
          4473,
          2110,
          7737,
          8082
        ],
        "name": "ERC20MetadataMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 4461,
              "nodeType": "Block",
              "src": "232:64:53",
              "statements": []
            },
            "documentation": null,
            "id": 4462,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 4458,
                    "name": "tokenURI",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4455,
                    "src": "222:8:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 4459,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 4457,
                  "name": "ERC20Metadata",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2110,
                  "src": "208:13:53",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Metadata_$2110_$",
                    "typeString": "type(contract ERC20Metadata)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "208:23:53"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4456,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4455,
                  "name": "tokenURI",
                  "nodeType": "VariableDeclaration",
                  "scope": 4462,
                  "src": "177:22:53",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4454,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "177:6:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "176:24:53"
            },
            "returnParameters": {
              "id": 4460,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "232:0:53"
            },
            "scope": 4473,
            "src": "164:132:53",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4471,
              "nodeType": "Block",
              "src": "354:39:53",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 4468,
                        "name": "tokenURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4464,
                        "src": "377:8:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 4467,
                      "name": "_setTokenURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2109,
                      "src": "364:12:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory)"
                      }
                    },
                    "id": 4469,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "364:22:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4470,
                  "nodeType": "ExpressionStatement",
                  "src": "364:22:53"
                }
              ]
            },
            "documentation": null,
            "id": 4472,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setTokenURI",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4465,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4464,
                  "name": "tokenURI",
                  "nodeType": "VariableDeclaration",
                  "scope": 4472,
                  "src": "323:22:53",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4463,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "323:6:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "322:24:53"
            },
            "returnParameters": {
              "id": 4466,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "354:0:53"
            },
            "scope": 4473,
            "src": "302:91:53",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 4474,
        "src": "107:288:53"
      }
    ],
    "src": "0:396:53"
  },
  "legacyAST": {
    "absolutePath": "/home/nventuro/dev/openzeppelin-solidity/contracts/mocks/ERC20MetadataMock.sol",
    "exportedSymbols": {
      "ERC20MetadataMock": [
        4473
      ]
    },
    "id": 4474,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4447,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:53"
      },
      {
        "absolutePath": "/home/nventuro/dev/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "file": "../token/ERC20/ERC20.sol",
        "id": 4448,
        "nodeType": "ImportDirective",
        "scope": 4474,
        "sourceUnit": 7738,
        "src": "25:34:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/nventuro/dev/openzeppelin-solidity/contracts/drafts/ERC1046/ERC20Metadata.sol",
        "file": "../drafts/ERC1046/ERC20Metadata.sol",
        "id": 4449,
        "nodeType": "ImportDirective",
        "scope": 4474,
        "sourceUnit": 2111,
        "src": "60:45:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4450,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 7737,
              "src": "137:5:53",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$7737",
                "typeString": "contract ERC20"
              }
            },
            "id": 4451,
            "nodeType": "InheritanceSpecifier",
            "src": "137:5:53"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4452,
              "name": "ERC20Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2110,
              "src": "144:13:53",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Metadata_$2110",
                "typeString": "contract ERC20Metadata"
              }
            },
            "id": 4453,
            "nodeType": "InheritanceSpecifier",
            "src": "144:13:53"
          }
        ],
        "contractDependencies": [
          2110,
          7737,
          8082
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 4473,
        "linearizedBaseContracts": [
          4473,
          2110,
          7737,
          8082
        ],
        "name": "ERC20MetadataMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 4461,
              "nodeType": "Block",
              "src": "232:64:53",
              "statements": []
            },
            "documentation": null,
            "id": 4462,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 4458,
                    "name": "tokenURI",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4455,
                    "src": "222:8:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 4459,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 4457,
                  "name": "ERC20Metadata",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2110,
                  "src": "208:13:53",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Metadata_$2110_$",
                    "typeString": "type(contract ERC20Metadata)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "208:23:53"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4456,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4455,
                  "name": "tokenURI",
                  "nodeType": "VariableDeclaration",
                  "scope": 4462,
                  "src": "177:22:53",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4454,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "177:6:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "176:24:53"
            },
            "returnParameters": {
              "id": 4460,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "232:0:53"
            },
            "scope": 4473,
            "src": "164:132:53",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4471,
              "nodeType": "Block",
              "src": "354:39:53",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 4468,
                        "name": "tokenURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4464,
                        "src": "377:8:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 4467,
                      "name": "_setTokenURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2109,
                      "src": "364:12:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory)"
                      }
                    },
                    "id": 4469,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "364:22:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4470,
                  "nodeType": "ExpressionStatement",
                  "src": "364:22:53"
                }
              ]
            },
            "documentation": null,
            "id": 4472,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setTokenURI",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4465,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4464,
                  "name": "tokenURI",
                  "nodeType": "VariableDeclaration",
                  "scope": 4472,
                  "src": "323:22:53",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4463,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "323:6:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "322:24:53"
            },
            "returnParameters": {
              "id": 4466,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "354:0:53"
            },
            "scope": 4473,
            "src": "302:91:53",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 4474,
        "src": "107:288:53"
      }
    ],
    "src": "0:396:53"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.2+commit.1df8f40c.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.0",
  "updatedAt": "2019-02-25T17:39:18.813Z",
  "devdoc": {
    "methods": {
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner allowed to a spender.",
        "params": {
          "owner": "address The address which owns the funds.",
          "spender": "address The address which will spend the funds."
        },
        "return": "A uint256 specifying the amount of tokens still available for the spender."
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "params": {
          "spender": "The address which will spend the funds.",
          "value": "The amount of tokens to be spent."
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "The address to query the balance of."
        },
        "return": "An uint256 representing the amount owned by the passed address."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "spender": "The address which will spend the funds.",
          "subtractedValue": "The amount of tokens to decrease the allowance by."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "addedValue": "The amount of tokens to increase the allowance by.",
          "spender": "The address which will spend the funds."
        }
      },
      "totalSupply()": {
        "details": "Total number of tokens in existence"
      },
      "transfer(address,uint256)": {
        "details": "Transfer token for a specified address",
        "params": {
          "to": "The address to transfer to.",
          "value": "The amount to be transferred."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.",
        "params": {
          "from": "address The address which you want to send tokens from",
          "to": "address The address which you want to transfer to",
          "value": "uint256 the amount of tokens to be transferred"
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}